<?php

/**
 * @file
 * Site specific search functionality.
 */

/**
 * Implements hook_block_info()
 */
function sn_search_block_info() {

  return array(

    'main-search' => array(
      'info' => 'Search: Main form',
    ),

    'refine-search' => array(
      'info' => 'Search: Refinement form',
    ),

  );
}

/**
 * Implements hook_block_view()
 */
function sn_search_block_view( $delta ) {

  switch ( $delta ) {

  case 'main-search' :
    return array(
      'content' => drupal_get_form( '_sn_search_main_form' )
    );

  case 'refine-search' :
    return array(
      'content' => drupal_get_form( '_sn_search_refine_form' )
    );

  }
}

/**
 * Form-building function for main search form.
 */
function _sn_search_main_form() {

  $continents = _sn_get_term_options( 'continents' );
  $countries = _sn_get_term_options( 'countries', 'field_continent' );
  $regions = _sn_get_term_options( 'regions', 'field_country' );
  $hotels = _sn_search_get_hotel_options();

  // Need to add multi-centre content in order to test this code
  //$multi_centres = _sn_search_get_multi_centre_options();
  //$destinations = array_merge( $hotels, $multi_centres );
  $destinations = $hotels;

  $form['continents'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select continent'),
    '#options' => $continents,
  );
  $form['countries'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select country'),
    '#options' => $countries,
  );
  $form['regions'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select region'),
    '#options' => $regions,
  );
  $form['destinations'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Destination'),
    '#options' => $destinations,
  );
  $form['multi-centre'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multi Centre Holidays'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check availability'),
  );

  return $form;
}

/**
 * Submit function for the main search form.
 *
 * Tediously long function but very simple logic: Find the most specific
 * thing that the user selected and got to the relevant node or search view.
 */
function _sn_search_main_form_submit( $form, &$form_state ) {
  //dsm( $form_state );

  // Did the user select multi-centre holidays?
  if ( $form_state['values']['multi-centre'] ) {

    // selected destination?
      // go to destination node
    // else
      $base_path = 'search-multi-centre/';
      // selected region?
        // go to search by region
      // else selected country?
        // go to search by country
      // else selected continent?
        // go to search by continent
      // endif
    // endif
  }
  else { // User did not select multi-centre

    // Did the user select a specific destination?
    if ( ! empty( $form_state['values']['destinations'] ) ) {
      $id = _sn_search_get_id_from_selection( $form_state['values']['destinations'] );
      $form_state['redirect'][] = 'node/' . $id;
    }
    else { // User did not select specific destination
      $base_path = 'search-hotels/';

      // @TODO Don't just use 'all' for higher level elements.
      // Fill these in so that the breadcrumbs look good.

      // Did user select a region?
      if ( ! empty( $form_state['values']['regions'] ) ) {
        $id = _sn_search_get_id_from_selection( $form_state['values']['regions'] );
        $form_state['redirect'][] = $base_path . 'all/all/' . $id;
      }
      // Did user select a country?
      elseif ( ! empty( $form_state['values']['countries'] ) ) {
        $id = _sn_search_get_id_from_selection( $form_state['values']['countries'] );
        $form_state['redirect'][] = $base_path . 'all/' . $id;
      }
      // Did user select a continent?
      elseif ( ! empty( $form_state['values']['continents'] ) ) {
        $id = _sn_search_get_id_from_selection( $form_state['values']['continents'] );
        $form_state['redirect'][] = $base_path . $id;
      }
    }
  }
}

/**
 * From a form select value, get the ID of the relevant entity.
 *
 * NOTE: Does *not* work for multi-centre destinations.
 */
function _sn_search_get_id_from_selection( $selected_value ) {
  $pattern = '#^[,\d]+/(\d+)$#';
  $matches = array();
  $success = preg_match( $pattern, $selected_value, $matches );
  //dsm( $matches );
  return $success ? $matches[1] : NULL;
}

/**
 * Get options for a select box for a given taxonomy vocabulary.
 *
 * @param $vocab_name
 *   Name of the vocabuary for which the term options should be retrieved.
 * @param $parent_field_name
 *   Name of the field that contains a reference to the "parent" term.
 *   NOTE that if a parent field exists then it references terms that are in
 *   a different vocabulary from $vocab_name.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'parent-id/term-id' => 'term-name', ... )
 */
function _sn_get_term_options( $vocab_name, $parent_field_name=NULL ) {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $vocab_name)
    ->execute();

  //dsm( $entities );

  $terms = taxonomy_term_load_multiple(
    array_keys( $entities['taxonomy_term'] ) );

  //dsm( $terms );

  $options = array();
  foreach ( $terms as $term ) {
    if ( $parent_field_name ) {
      $parent_id = $term->{"$parent_field_name"}['und'][0]['tid'];
    }
    else {
      $parent_id = '0';
    }
    $options[ $parent_id . '/' . $term->tid ] = $term->name;
  }

  //dsm( $options );

  return $options;
}

/**
 * Get select options for hotels.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'region-term-id/hotel-node-id' => 'hotel-node-title', ... )
 */
function _sn_search_get_hotel_options() {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'hotel' )
    ->execute();

  //dsm( $entities );

  $nodes = node_load_multiple( array_keys( $entities['node'] ) );

  //dsm( $nodes );

  $options = array();
  foreach ( $nodes as $node ) {
    $parent_id = $node->field_region['und'][0]['tid'];
    $options[ $parent_id . '/' . $node->nid ] = $node->title;
  }

  //dsm( $options );

  return $options;
}

/**
 * Get select options for multi-centre-holidays (mch).
 *
 * Ouput of this function is distinguishable from _sn_search_get_hotel_options
 * because key strings in the array returned by this function start with 'MC,'.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'MC,region-term-id-list/mch-node-id' => 'mch-node-title', ... )
 */
function _sn_search_get_multi_centre_options() {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'multi_centre_holiday' )
    ->execute();

  //dsm( $entities );

  $nodes = node_load_multiple( array_keys( $entities['node'] ) );

  //dsm( $nodes );

  $options = array();
  foreach ( $nodes as $node ) {

    // Iterate through MC regions field values to build up a key prefix
    // of comma separated region term IDs

    // Add something to prefix to indicate multi-centre nature of this option
    // How about a comma?

    $region_ids = 'MC';
    foreach( $node->field_mc_region['und'] as $region ) {
      $region_ids .= ',' . $region['tid'];
    }

    $options[ $region_ids . '/' . $node->nid ] = $node->title;
  }

  //dsm( $options );

  return $options;
}

/**
 */
function _sn_search_refine_form() {
}

/**
 */
function _sn_search_refine_form_submit() {
}

