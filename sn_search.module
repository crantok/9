<?php

/**
 * @file
 * Site specific search functionality.
 */


function sn_search_menu() {
  return array(
    'ajax/search-hotels' => array(
      'page callback' => '_sn_search_ajax_data',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'ajax/search-multi-centre' => array(
      'page callback' => '_sn_search_ajax_data',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
  );
}

function _sn_search_ajax_data() {
  $view_name = str_replace( '-', '_', arg(1) );
  //print_r( $view_name );
  $args = array_filter( func_get_args() );
  //print_r( $args );

  $view = views_get_view( $view_name );
  $view->set_arguments( $args );

  // Massive HACK
  // 1) AJAX paging of views does not work when embedding a view via AJAX
  //    in the first place!
  // 2) Views pager links (non-ajax-paging) are based on the request URL,
  //    which in our case is an ajax callback.
  // Solution: Using non-ajax paging and have done a brute-force string-
  // replace on the whole view output to get useful pager links. Yeeucch!
  $view_output = str_replace( 'ajax/search-', 'search-', $view->preview() );
  //print_r( $view_ouput );

  $view_data = array(
    'name' => $view->name,
    'args' => $view->args,
    'result' => $view->result,
  );
  //print_r( $view_data );

  $ajax_form = drupal_render(
    drupal_get_form( '_sn_search_refine_form', $view_data ) );

  drupal_json_output( array(
    'view' => $view_output, 'form' => $ajax_form ) );
}

/**
 * Implements hook_block_info()
 */
function sn_search_block_info() {

  return array(

    'main-search' => array(
      'info' => 'Search: Main form',
    ),

    'refine-search' => array(
      'info' => 'Search: Refinement form',
    ),

  );
}

/**
 * Implements hook_block_view()
 */
function sn_search_block_view( $delta ) {

  switch ( $delta ) {

  case 'main-search' :
    $js_file = drupal_get_path('module', 'sn_search') . '/sn_search_main.js';
    drupal_add_js( $js_file );
    return array(
      'content' => drupal_get_form( '_sn_search_main_form' )
    );

  case 'refine-search' :
    $js_file = drupal_get_path('module', 'sn_search') . '/sn_search_refine.js';
    drupal_add_js( $js_file );
    return array( 'content' => '<div id="ajax-sn-search-refine-form"></div>');
  }
}

/**
 * Form-building function for main search form.
 */
function _sn_search_main_form() {

  $continents = _sn_get_term_options( 'continents' );
  $countries = _sn_get_term_options( 'countries', 'field_continent' );
  $regions = _sn_get_term_options( 'regions', 'field_country' );
  //$hotels = _sn_search_get_hotel_options();

  // Need to add multi-centre content in order to test this code
  //$multi_centres = _sn_search_get_multi_centre_options();
  //$destinations = array_merge( $hotels, $multi_centres );
  //$destinations = $hotels;

  $form['continents'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select continent'),
    '#options' => $continents,
  );
  $form['countries'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select country'),
    '#options' => $countries,
  );
  $form['regions'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select region'),
    '#options' => $regions,
  );
  //$form['destinations'] = array(
  //  '#type' => 'select',
  //  '#multiple' => FALSE,
  //  '#empty_option' => t('Destination'),
  //  '#options' => $destinations,
  //);
  $form['multi-centre'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multi Centre Holidays'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check availability'),
  );

  return $form;
}

// Helper functions for main-search form-building.
//

/**
 * Get options for a select box for a given taxonomy vocabulary.
 *
 * @param $vocab_name
 *   Name of the vocabuary for which the term options should be retrieved.
 * @param $parent_field_name
 *   Name of the field that contains a reference to the "parent" term.
 *   NOTE that if a parent field exists then it references terms that are in
 *   a different vocabulary from $vocab_name.
 * @param $required_parent_id
 *   If non-null, restrict returned elements to having this parent ID.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'parent-id/term-id' => 'term-name', ... )
 */
function _sn_get_term_options( $vocab_name, $parent_field_name=NULL, $required_parent_id = NULL ) {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $vocab_name)
    ->execute();

  //dsm( $entities );

  $terms = taxonomy_term_load_multiple(
    array_keys( $entities['taxonomy_term'] ) );

  //dsm( $terms );

  $options = array();
  foreach ( $terms as $term ) {
    if ( $parent_field_name ) {
      $parent_id = $term->{"$parent_field_name"}['und'][0]['tid'];
    }
    else {
      $parent_id = '0';
    }

    if ( ! $required_parent_id  ||  $parent_id == $required_parent_id ) {
      $options[ $parent_id . '/' . $term->tid ] = $term->name;
    }
  }

  //dsm( $options );

  return $options;
}

//
// End of helper functions for main-search form-building.


/**
 * Submit function for the main search form.
 */
function _sn_search_main_form_submit( $form, &$form_state ) {

  // Build path from region, country, continent selections.
  $path = '';
  $id = _sn_search_get_id_from_selection( $form_state['values']['regions'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );
  $id = _sn_search_get_id_from_selection( $form_state['values']['countries'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );
  $id = _sn_search_get_id_from_selection( $form_state['values']['continents'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );

  // Is the user searching for multi-centre holidays?
  if ( ! empty( $form_state['values']['multi-centre'] ) ) {
    $path = 'search-multi-centre' . $path;
  }
  else {
    $path = 'search-hotels' . $path;
  }

  // Redirect to selected view.
  $form_state['redirect'][] = $path;
}

// Helper functions for main-search form submission.
//

/**
 * From a form select value, get the ID of the relevant entity.
 *
 * NOTE: Does *not* work for multi-centre destinations.
 */
function _sn_search_get_id_from_selection( $selected_value ) {
  $pattern = '#^[,\d]+/(\d+)$#';
  $matches = array();
  $success = preg_match( $pattern, $selected_value, $matches );
  //dsm( $matches );
  return $success ? $matches[1] : NULL;
}

/**
 * Prepend an ID to a path being built for a view URL.
 *
 * @param $path
 *   The path built so far. (Being built right-to-left.)
 * @param $id
 *   The ID to prepend to the path.
 *
 * @return
 *   The path, whether or not it was modified.
 */
function _sn_search_prepend_id_to_view_path( $path, $id ) {

  // Was an ID passed to function?
  if ( $id ) {
    return '/' . $id . $path;
  }
  else { // No ID

    // Has $path already been built from more specific IDs? (Very unlikely!)
    if ( $path ) {
      return '/all' . $path;
    }
    else {
      // No ID and no path. Presumably returning an empty string here.
      return $path;
    }
  }
}

//
// End of helper functions for main-search form submission.


/**
 */
function _sn_search_refine_form( $form, $form_state ) {

  $current_view = $form_state['build_info']['args'][0];
  $args = $current_view['args'];

  // FRAGILITY: Necessary to know the order of boolean arguments passed
  // to the view. Currently this is in alphabetic order, i.e.
  //     eco, family, honeymoon, luxury

  // @todo : This boolean checkbox generation is ugly. Extract to a
  // function to be called for each checkbox.

  $form['eco'] = array(
    '#type' => 'checkbox',
    '#title' => t('Eco hotels'),
  );
  if ( $args[3] != 'all' ) {
    $form['eco']['#default_value'] = $args[3];
  }

  $form['honeymoon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Honeymoon'),
  );
  if ( $args[5] != 'all' ) {
    $form['honeymoon']['#default_value'] = $args[5];
  }

  $form['family'] = array(
    '#type' => 'checkbox',
    '#title' => t('Family'),
  );
  if ( $args[4] != 'all' ) {
    $form['family']['#default_value'] = $args[4];
  }

  $form['luxury'] = array(
    '#type' => 'checkbox',
    '#title' => t('Luxury'),
  );
  if ( $args[6] != 'all' ) {
    $form['luxury']['#default_value'] = $args[6];
  }


  $continents = _sn_get_term_options( 'continents' );
  $form['continents'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => $continents,
  );
  if ( $args[0] != 'all' ) {
    $current_continent = $current_view['args'][0];
    $form['continents']['#default_value'] = '0/' . $current_continent; 
  }
  else {
    $current_continent = NULL;
    $form['continents']['#empty_option'] = t('Select continent');
  }
  //print_r( $current_continent );
  
  $countries = _sn_get_term_options(
    'countries', 'field_continent', $current_continent );
  $form['countries'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => $countries,
  );

  $is_country_selected = ( isset( $args[1] ) && $args[1] != 'all' );

  if ( $is_country_selected ) {
    $country_key = $current_continent . '/' . $current_view['args'][1];
    if ( array_key_exists( $country_key, $countries ) ) {
      $form['countries']['#default_value'] = $country_key;
    }
  }
  if ( ! isset( $form['countries']['#default_value'] ) ) {
    $form['countries']['#empty_option'] = t('Select country');
  }

  // Showing checkboxes with only a continent selected would probably be
  // a bad idea.
  if ( $is_country_selected ) {
    $regions = _sn_get_region_checkbox_options( $current_view );

    $selected = array();

    // Are one or more regions selected?
    if ( $args[2] != 'all' ) {
      $selected = explode( ',', $current_view['args'][2] );
    }
    //dsm( $selected );

    $form['regions'] = array(
      '#title' => t('Regions'),
      '#type' => 'checkboxes',
      '#options' => $regions,
      '#default_value' => $selected,
    );
  }

  return $form;
}

/**
 * Assumes that current view is not a search of a whole continent.
 */
function _sn_get_region_checkbox_options( $current_view ) {

  $args = $current_view['args'];

  // Is the current view a country view (i.e. country selected but
  // no regions selected)?
  if ( $args[1] != 'all'  &&  $args[2] == 'all' ) {
    $country_result = &$current_view['result'];
  }
  else {
    // execute a country view to get all results for selected country
    $country_view = views_get_view( $current_view['name'] );
    $args[2] = 'all';
    $country_view->set_arguments( $args );
    $country_view->execute();
    //dsm( $country_view );
    $country_result = &$country_view->result;
  }
  //dsm( $country_result );

  // Compile a list of regions represented in the results.
  $regions = array();
  foreach ( $country_result as $result ) {

    $region_id = $result->field_field_region[0]['raw']['tid'];

    // Has this region_id been seen already in this loop?
    if ( isset( $regions[$region_id] ) ) {
      $regions[$region_id]['num'] += 1;
    }
    else { // new region
      $regions[$region_id] = array(
        'name' => $result->field_field_region[0]['rendered']['#markup'],
        'num' => 1,
      );
    }
  }
  //dsm ( $regions );

  // Change regions array to be suitable for use as checkbox options.
  foreach ( $regions as $id => $details ) {
    $regions[$id] = $details['name'] . ' (' . $details['num'] . ')';
  }
  //dsm ( $regions );

  return $regions;
}

/**
 */
function _sn_search_refine_form_submit( $form, &$form_state ) {
  //dsm( $form );

  // Build path from region, country, continent selections.
  $path = '';

  // Is the Regions field a select box?
  if ( $form['regions']['#type'] == 'select' ) {
    $id = _sn_search_get_id_from_selection( $form_state['values']['regions'] );
  }
  else { // Regions is a set of checkboxes
      $id = _sn_search_get_regions_from_checkboxes( $form_state['values']['regions'] );
  }

  $path = _sn_search_prepend_id_to_view_path( $path, $id );
  $id = _sn_search_get_id_from_selection( $form_state['values']['countries'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );
  $id = _sn_search_get_id_from_selection( $form_state['values']['continents'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );

  $path = arg(0) . $path;
  //dsm( $path );
  // Redirect to selected view.
  $form_state['redirect'][] = $path;
}

function _sn_search_get_regions_from_checkboxes( $checkboxes ) {
  $regions = '';
  foreach ( $checkboxes as $key => $value ) {
    if ( $value ) {
      $regions .= $key . ',';
    }
  }
  if ( ! empty( $regions ) ) {
    $regions = substr( $regions, 0, -1 );
  }
  //dsm( $regions );
  return $regions;
}
