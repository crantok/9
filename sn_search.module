<?php

/**
 * @file
 * Site specific search functionality.
 */

/**
 * Implements hook_block_info()
 */
function sn_search_block_info() {

  return array(

    'main-search' => array(
      'info' => 'Search: Main form',
    ),

    'refine-search' => array(
      'info' => 'Search: Refinement form',
    ),

  );
}

/**
 * Implements hook_block_view()
 */
function sn_search_block_view( $delta ) {

  switch ( $delta ) {

  case 'main-search' :
    return array(
      'content' => drupal_get_form( '_sn_search_main_form' )
    );

  case 'refine-search' :
    return array(
      'content' => drupal_get_form( '_sn_search_refine_form' )
    );

  }
}

/**
 * Form-building function for main search form.
 */
function _sn_search_main_form() {

  $continents = _sn_get_term_options( 'continents' );
  $countries = _sn_get_term_options( 'countries', 'field_continent' );
  $regions = _sn_get_term_options( 'regions', 'field_country' );
  $hotels = _sn_search_get_hotel_options();

  // Need to add multi-centre content in order to test this code
  //$multi_centres = _sn_search_get_multi_centre_options();
  //$destinations = array_merge( $hotels, $multi_centres );
  $destinations = $hotels;

  $form['continents'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select continent'),
    '#options' => $continents,
  );
  $form['countries'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select country'),
    '#options' => $countries,
  );
  $form['regions'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Select region'),
    '#options' => $regions,
  );
  $form['destinations'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#empty_option' => t('Destination'),
    '#options' => $destinations,
  );
  $form['multi-centre'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multi Centre Holidays'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check availability'),
  );

  return $form;
}

// Helper functions for main-search form-building.
//

/**
 * Get options for a select box for a given taxonomy vocabulary.
 *
 * @param $vocab_name
 *   Name of the vocabuary for which the term options should be retrieved.
 * @param $parent_field_name
 *   Name of the field that contains a reference to the "parent" term.
 *   NOTE that if a parent field exists then it references terms that are in
 *   a different vocabulary from $vocab_name.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'parent-id/term-id' => 'term-name', ... )
 */
function _sn_get_term_options( $vocab_name, $parent_field_name=NULL ) {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $vocab_name)
    ->execute();

  //dsm( $entities );

  $terms = taxonomy_term_load_multiple(
    array_keys( $entities['taxonomy_term'] ) );

  //dsm( $terms );

  $options = array();
  foreach ( $terms as $term ) {
    if ( $parent_field_name ) {
      $parent_id = $term->{"$parent_field_name"}['und'][0]['tid'];
    }
    else {
      $parent_id = '0';
    }
    $options[ $parent_id . '/' . $term->tid ] = $term->name;
  }

  //dsm( $options );

  return $options;
}

/**
 * Get select options for hotels.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'region-term-id/hotel-node-id' => 'hotel-node-title', ... )
 */
function _sn_search_get_hotel_options() {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'hotel' )
    ->execute();

  //dsm( $entities );

  $nodes = node_load_multiple( array_keys( $entities['node'] ) );

  //dsm( $nodes );

  $options = array();
  foreach ( $nodes as $node ) {
    $parent_id = $node->field_region['und'][0]['tid'];
    $options[ $parent_id . '/' . $node->nid ] = $node->title;
  }

  //dsm( $options );

  return $options;
}

/**
 * Get select options for multi-centre-holidays (mch).
 *
 * Ouput of this function is distinguishable from _sn_search_get_hotel_options
 * because key strings in the array returned by this function start with 'MC,'.
 *
 * @return
 *   Array of select options. Keys and values are strings. Array has the form...
 *   array( 'MC,region-term-id-list/mch-node-id' => 'mch-node-title', ... )
 */
function _sn_search_get_multi_centre_options() {
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'multi_centre_holiday' )
    ->execute();

  //dsm( $entities );

  $nodes = node_load_multiple( array_keys( $entities['node'] ) );

  //dsm( $nodes );

  $options = array();
  foreach ( $nodes as $node ) {

    // Iterate through MC regions field values to build up a key prefix
    // of comma separated region term IDs

    $region_ids = 'MC';
    foreach( $node->field_mc_region['und'] as $region ) {
      $region_ids .= ',' . $region['tid'];
    }

    $options[ $region_ids . '/' . $node->nid ] = $node->title;
  }

  //dsm( $options );

  return $options;
}

//
// End of helper functions for main-search form-building.


/**
 * Submit function for the main search form.
 */
function _sn_search_main_form_submit( $form, &$form_state ) {
  //dsm( $form_state );
  //
  $destination = $form_state['values']['destinations'];

  // Did the user select a specific destination?
  if ( ! empty( $destination ) ) {

    $is_multi_centre = ( 0 === strpos( $destination, 'MC' ) );
    if ( $is_multi_centre ) {
      // Cut off MC (multi-centre) identifier
      $destination = substr( $destination, 2 );
    }

    $id = _sn_search_get_id_from_selection( $destination );
    $form_state['redirect'][] = 'node/' . $id;
  }
  else { // User selected something larger than a specific destination

    // Build path from region, country, continent selections.
    $path = '';
    $id = _sn_search_get_id_from_selection( $form_state['values']['regions'] );
    $path = _sn_search_prepend_id_to_view_path( $path, $id );
    $id = _sn_search_get_id_from_selection( $form_state['values']['countries'] );
    $path = _sn_search_prepend_id_to_view_path( $path, $id );
    $id = _sn_search_get_id_from_selection( $form_state['values']['continents'] );
    $path = _sn_search_prepend_id_to_view_path( $path, $id );

    // Is the user searching for multi-centre holidays?
    if ( ! empty( $form_state['values']['multi-centre'] ) ) {
      $path = 'search-multi-centres' . $path;
    }
    else {
      $path = 'search-hotels' . $path;
    }

    // Redirect to selected view.
    $form_state['redirect'][] = $path;
  }
}

// Helper functions for main-search form submission.
//

/**
 * From a form select value, get the ID of the relevant entity.
 *
 * NOTE: Does *not* work for multi-centre destinations.
 */
function _sn_search_get_id_from_selection( $selected_value ) {
  $pattern = '#^[,\d]+/(\d+)$#';
  $matches = array();
  $success = preg_match( $pattern, $selected_value, $matches );
  //dsm( $matches );
  return $success ? $matches[1] : NULL;
}

/**
 * Prepend an ID to a path being built for a view URL.
 *
 * @param $path
 *   The path built so far. (Being built right-to-left.)
 * @param $id
 *   The ID to prepend to the path.
 *
 * @return
 *   The path, whether or not it was modified.
 */
function _sn_search_prepend_id_to_view_path( $path, $id ) {

  // Was an ID passed to function?
  if ( $id ) {
    return '/' . $id . $path;
  }
  else { // No ID

    // Has $path already been built from more specific IDs? (Very unlikely!)
    if ( $path ) {
      return '/all' . $path;
    }
    else {
      // No ID and no path. Presumably returning an empty string here.
      return $path;
    }
  }
}

//
// End of helper functions for main-search form submission.


class SnSearchViewStorage {

  static private $viewData = 'no data';

  static public function setData( $data ) {
    self::$viewData = $data;
  }

  static public function getData() {
    return self::$viewData;
  } 

  static public function clearData() {
    unset( self::$viewData );
    self::$viewData = NULL;
  } 
}


function sn_search_views_post_execute( $view ) {
  $data = array(
    'name' => $view->name,
    'args' => $view->args,
    'result' => $view->result,
  );
  SnSearchViewStorage::setData( $data );
}

/**
 */
function _sn_search_refine_form() {

  $continents = _sn_get_term_options( 'continents' );
  $countries = _sn_get_term_options( 'countries', 'field_continent' );

  $current_view = SnSearchViewStorage::getData();
  //dsm( $current_view );

  $form['continents'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => $continents,
  );
  if ( isset( $current_view['args'][0] ) ) {
    $current_continent = $current_view['args'][0];
    $form['continents']['#default_value'] = '0/' . $current_continent; 
  }
  else {
    $current_continent = NULL;
    $form['continents']['#empty_option'] = t('Select continent');
  }

  $form['countries'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => $countries,
  );
  if ( $current_continent && isset( $current_view['args'][1] ) ) {
    $country_key = $current_continent . '/' . $current_view['args'][1];
    if ( array_key_exists( $country_key, $countries ) ) {
      $form['countries']['#default_value'] = $country_key;
    }
  }
  if ( ! isset( $form['countries']['#default_value'] ) ) {
    $form['countries']['#empty_option'] = t('Select country');
  }

  // Showing checkboxes with only a continent selected would probably be
  // a bad idea.
  $show_checkboxes = count( $current_view['args'] ) > 1;
 
  if ( $show_checkboxes ) {
    $regions = _sn_get_region_checkbox_options( $current_view );

    if ( count( $current_view['args'] ) == 2 ) {
      $selected = array_keys( $regions );
    }
    else {
      $selected = explode( ',', $current_view['args'][2] );
    }
    //dsm( $selected );

    $form['regions'] = array(
      '#title' => t('Regions'),
      '#type' => 'checkboxes',
      '#options' => $regions,
      '#default_value' => $selected,
    );
  }
  else { // Just show a drop down
    $regions = _sn_get_term_options( 'regions', 'field_country' );
    $form['regions'] = array(
      '#type' => 'select',
      '#multiple' => FALSE,
      '#empty_option' => t('Select region'),
      '#options' => $regions,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );

  return $form;
}

/**
 * Assumes that current view is not a search of a whole continent.
 */
function _sn_get_region_checkbox_options( $current_view ) {

  // Is the current view a country view (i.e. no selected region)?
  if ( count( $current_view['args'] ) == 2 ) {
    $country_result = &$current_view['result'];
  }
  else {
    // execute a country view to get all results for selected country
    $country_view = views_get_view( $current_view['name'] );
    $country_view->set_arguments( array_slice( $current_view['args'], 0, 2 ) );
    $country_view->execute();
    //dsm( $country_view );
    $country_result = &$country_view->result;
  }
  //dsm( $country_result );

  // Compile a list of regions represented in the results.
  $regions = array();
  foreach ( $country_result as $result ) {

    $region_id = $result->field_field_region[0]['raw']['tid'];

    // Has this region_id been seen already in this loop?
    if ( isset( $regions[$region_id] ) ) {
      $regions[$region_id]['num'] += 1;
    }
    else { // new region
      $regions[$region_id] = array(
        'name' => $result->field_field_region[0]['rendered']['#markup'],
        'num' => 1,
      );
    }
  }
  //dsm ( $regions );

  // Change regions array to be suitable for use as checkbox options.
  foreach ( $regions as $id => $details ) {
    $regions[$id] = $details['name'] . ' (' . $details['num'] . ')';
  }
  //dsm ( $regions );

  return $regions;
}

/**
 */
function _sn_search_refine_form_submit( $form, &$form_state ) {
  //dsm( $form );

  // Build path from region, country, continent selections.
  $path = '';

  // Is the Regions field a select box?
  if ( $form['regions']['#type'] == 'select' ) {
    $id = _sn_search_get_id_from_selection( $form_state['values']['regions'] );
  }
  else { // Regions is a set of checkboxes
      $id = _sn_search_get_regions_from_checkboxes( $form_state['values']['regions'] );
  }

  $path = _sn_search_prepend_id_to_view_path( $path, $id );
  $id = _sn_search_get_id_from_selection( $form_state['values']['countries'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );
  $id = _sn_search_get_id_from_selection( $form_state['values']['continents'] );
  $path = _sn_search_prepend_id_to_view_path( $path, $id );

  $path = arg(0) . $path;
  //dsm( $path );
  // Redirect to selected view.
  $form_state['redirect'][] = $path;
}

function _sn_search_get_regions_from_checkboxes( $checkboxes ) {
  $regions = '';
  foreach ( $checkboxes as $key => $value ) {
    if ( $value ) {
      $regions .= $key . ',';
    }
  }
  if ( ! empty( $regions ) ) {
    $regions = substr( $regions, 0, -1 );
  }
  //dsm( $regions );
  return $regions;
}
